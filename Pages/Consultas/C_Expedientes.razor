@page "/Consulta_expediente"
@using Model
@inject ExpedientesBLL ExpedientesBLL;
@using System.Linq.Expressions;
@attribute [Authorize]


<EditForm Model="Informacion">
    <DataAnnotationsValidator />
    <div class="card-body bg-white">
        <div class="card-header">
            <h4>Consulta de Expedientes</h4>
        </div>

        <div class="input-group">
            @*Fecha*@
            <div class="col-2">
                <label> Desde</label>
                <div class="mb-3">
                    <InputDate @bind-Value="FechaDesde" class="form-control" />
                    <ValidationMessage For="@(() => FechaDesde)" />
                </div>
            </div>
            <div class="col-2 mx-3">
                <label> Hasta</label>
                <div class="mb-3">
                    <InputDate @bind-Value="FechaHasta" class="form-control" />
                    <ValidationMessage For="@(() => FechaHasta)" />
                </div>
            </div>
        </div>

        <div class="col-2 mx-3">
            <div class="row">
                <select class="form-select" @bind="Filtro">
                    <option value="Todo">Todo</option>
                    <option value="IdExpediente">Id Expediente</option>
                    <option value="DescripcionExpediente">Descripcion Expediente</option>
                    <option value="NombreBeneficiario">Nombre Beneficiario</option>
                    <option value="ApellidoBeneficiario">Apellido Beneficiario</option>
                    <option value="CedulaoRnc">Cedula o Rnc</option>
                    <option value="TipoExpediente">Tipo Expediente</option>
                    <option value="Monto">Monto</option>
                    <option value="Estado">Estado</option>
                    <option value="FechaDeEntrada">Fecha Entrada</option>
                </select>
            </div>
        </div>
        <div class="col">
            <div class="input-group d-flex align-items-end">
                <label>Buscar</label>
                <div class="input-group">
                    <input type="text" class="form-control" @bind="Criterio" />
                    <button type="button" class="btn btn-info" @onclick="Buscar">
                        <i class="oi oi-magnifying-glass" /> Buscar</button>
                </div>
            </div>
        </div>
        <table class="table table-striped table-hover mt-4 table-striped" style="cursor: pointer;">
            <thead class="thead-green">
                <tr class="table-info">
                    <th>IdExpediente</th>
                    <th>Descripcion Expediente</th>
                    <th>Nombre Beneficiario</th>
                    <th>Apellido Beneficiario</th>
                    <th>Cedula o Rnc</th>
                    <th>Tipo Expediente</th>
                    <th>Monto</th>
                    <th>Estado</th>
                    <th>Fecha Entrada</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Informacion)
                {
                    <tr>
                        <td>@item.IdExpediente</td>
                        <td>@item.DescripcionExpediente</td>
                        <td>@item.NombreBeneficiario</td>
                        <td>@item.ApellidoBeneficiario</td>
                        <td>@item.CedulaoRnc</td>
                        <td>@item.TipoExpediente</td>
                        <td>@item.Monto</td>
                        <td>@item.Estado</td>
                        <td>@item.FechaDeEntrada</td>
                        <td><a href="expediente/@item.IdExpediente">Ver</a></td>
                    </tr>
                }
            </tbody>
        </table>
        <h6>Expedientes: @Informacion.Count()</h6>
    </div>

</EditForm>

@code {

    public Expedientes expedientes { set; get; } = new Expedientes();
    public string? Filtro { get; set; }
    public string? Criterio { get; set; }
    DateTime FechaHasta { get; set; } = DateTime.Now;
    DateTime FechaDesde { get; set; } = DateTime.Now;
    public List<Expedientes> Informacion { get; set; } = new List<Expedientes>();
    protected override void OnInitialized()
    {
        DateTime FechaDesde = FechaHasta.AddMonths(-1);
        base.OnInitialized();
    }
    private Expression<Func<Expedientes, bool>> _filtroSeleccionado;

    private void SeleccionarFiltro()
    {
        var predicates = new Dictionary<string, Expression<Func<Expedientes, bool>>>()
            {
            { "Todo", o => true },
            { "IdExpediente", o => o.IdExpediente.ToString() == Criterio },
            { "DescripcionExpediente", o => o.DescripcionExpediente.ToLower().Contains(Criterio.ToLower()) },
            { "NombreBeneficiario", o => o.NombreBeneficiario.ToLower().Contains(Criterio.ToLower()) },
            { "ApellidoBeneficiario", o => o.ApellidoBeneficiario.ToLower().Contains(Criterio.ToLower()) },
            { "CedulaoRnc", o => o.CedulaoRnc.ToLower().Contains(Criterio.ToLower()) },
            { "TipoExpediente", o => o.TipoExpediente.ToLower().Contains(Criterio.ToLower()) },
            { "Monto", o => o.Monto.ToString().Contains(Criterio.ToLower()) },
            { "Estado", o => o.Estado.ToLower().Contains(Criterio.ToLower()) },
            { "FechaDeEntrada", x => (x.FechaDeEntrada >= FechaDesde) && (x.FechaDeEntrada <= FechaHasta) }
            };

        _filtroSeleccionado = predicates.ContainsKey(Filtro) ? predicates[Filtro] : o => true;
    }

    public async Task Buscar()
    {
        if (Criterio == null)
        {
            Informacion = await ExpedientesBLL.GetList(o => true);
            return;
        }
        SeleccionarFiltro();
        Informacion = await ExpedientesBLL.GetList(_filtroSeleccionado);
    }

}