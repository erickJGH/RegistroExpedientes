@page "/Consulta_usuarios"
@using Model
@using System.Linq.Expressions;
@inject UsuariosBLL UsuariosBLL;
@attribute [Authorize]


<EditForm Model="Informacion">
    <DataAnnotationsValidator />
    <div class="card-body bg-white">
    <div class="card-header">
        <h4>Consulta de Usuarios</h4>
    </div>

        @* <div class="input-group"> *@
            @*Fecha*@
            @* <div class="col-2">
                <label> Desde</label>
                <div class="mb-3">
                    <InputDate @bind-Value="FechaDesde" class="form-control" />
                    <ValidationMessage For="@(() => FechaDesde)" />
                </div>
            </div>
            <div class="col-2 mx-3">
                <label> Hasta</label>
                <div class="mb-3">
                    <InputDate @bind-Value="FechaHasta" class="form-control" />
                    <ValidationMessage For="@(() => FechaHasta)" />
                </div>
            </div>
        </div> *@

        <div class="col-2 mx-3">
            <div class="row">
                <select class="form-select" @bind="Filtro">
                    <option disabled selected>Seleccione</option>
                    <option value="Todo">Todo</option>
                    <option value="IdUsuario">Id Usuarios</option>
                    <option value="Departamento">Departamento</option>
                    <option value="Nombre">Nombre</option>
                    <option value="Apellido">Apellido</option>
                    <option value="Cedula">Cedula</option>
                    <option value="Usuario1">Usuario</option>
                    <option value="Privilegio">Privilegio</option>
                    <option value="Estado">Estado</option>
                    <option value="Telefono">Telefono</option>
                </select>
            </div>
        </div>
        <div class="col">
            <div class="input-group d-flex align-items-end">
                <label>Buscar</label>
                <div class="input-group">
                    <input type="text" class="form-control" @bind="Criterio" />
                    <button type="button" class="btn btn-info" @onclick="Buscar">
                        <i class="oi oi-magnifying-glass" /> Buscar</button>
                </div>
            </div>
        </div>
        <table class="table table-striped table-hover mt-4 table-striped" style="cursor: pointer;">
            <thead class="thead-green">
                <tr class="table-info">
                    <th>IdUsuario</th>
                    <th>Departamento</th>
                    <th>Nombre</th>
                    <th>Apellido</th>
                    <th>Cedula o Rnc</th>
                    <th>Usuario</th>
                    <th>Privilegio</th>
                    <th>Estado</th>
                    <th>Telefono</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Informacion)
                {
                    <tr>
                        <td>@item.IdUsuario</td>
                        <td>@item.Departamento</td>
                        <td>@item.Nombre</td>
                        <td>@item.Apellido</td>
                        <td>@item.Cedula</td>
                        <td>@item.Usuario1</td>
                        <td>@item.Privilegio</td>
                        <td>@item.Estado</td>
                        <td>@item.Telefono</td>
                        <td><a href="usuario/@item.IdUsuario">Ver</a></td>
                    </tr>
                }
            </tbody>
        </table>
        <h6>Usuarios: @Informacion.Count()</h6>
    </div>

</EditForm>

@code {

    public Usuarios usuarios { set; get; } = new Usuarios();
    public string? Filtro { get; set; }
    public string? Criterio { get; set; }
    @* public DateTime FechaDesde { get; set; } 
    public DateTime FechaHasta { get; set; } = DateTime.Now; *@
    public List<Usuarios> Informacion { get; set; } = new List<Usuarios>();
    protected override void OnInitialized()
    {
        base.OnInitialized();
    }
    public async Task Buscar()
    {
        if (Criterio == null)
        {
            Informacion = await UsuariosBLL.GetList(o => true);
            return;
        }

        var predicates = new Dictionary<string, Expression<Func<Usuarios, bool>>>()
        {
        { "Todo", e => true },
        { "IdUsuario", o => o.IdUsuario.ToString() == Criterio },
        { "Nombre", o => o.Nombre.ToLower().Contains(Criterio.ToLower()) },
        { "Apellido", e => e.Apellido.ToLower().Contains(Criterio.ToLower()) },
        { "Cedula", e => e.Cedula.ToLower().Contains(Criterio.ToLower()) },
        { "Usuario", e => e.Usuario1.ToLower().Contains(Criterio.ToLower()) },
        { "Privilegio", e => e.Privilegio.ToLower().Contains(Criterio.ToLower()) },
        { "Estado", e => e.Estado.ToString().Contains(Criterio.ToLower()) },
        { "Telefono", e => e.Telefono.ToLower().Contains(Criterio.ToLower()) },
        };

        if (predicates.ContainsKey(Filtro))
        {
            Informacion = await UsuariosBLL.GetList(predicates[Filtro]);
        }
        else
        {
            Informacion = await UsuariosBLL.GetList(e => true);
        }
    }

}