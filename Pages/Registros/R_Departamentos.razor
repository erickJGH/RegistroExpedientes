@page "/departamento"
@page "/departamento/{IdDepartamento:int}"
@using Model

@inject DepartamentoBLL departamentoBLL
@inject NotificationService notificationService

<EditForm Model="departamento" OnValidSubmit="Guardar">
	<DataAnnotationsValidator />

	<div class="card">
		<div class="card-header">
			<h3>Registro Departamento</h3>
		</div>
		<div class="card-body">
			@*NombreDepartamento*@
			<div class="form-group">
				<label>Nombre Departamento</label>
				<InputText
					@bind-Value="departamento.NombreDepartamento"
					class="form-control"
				/>
				<ValidationMessage For="@(() => departamento.NombreDepartamento)" />
			</div>

			<div class="card-footer">
				<div class="form-group text-center" display: inline-block>
				<button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">
					<i class="oi oi-file" /> Nuevo
				</button>
				<button type="submit" class="btn btn-lg btn-success">
					<i class="oi oi-document" /> Guardar
				</button>
				<button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">
					<i class="oi oi-trash" /> Eliminar
				</button>
			</div>
		</div>
	</div>
    </div>
</EditForm>

@code
{
    [Parameter]
    public int IdDepartamento { get; set; }
    public Departamentos departamento { get; set; } = new Departamentos();
    public String mensaje { get; set; } = "";

    private List<Departamentos> ListaDepartamento { get; set; } = new List<Departamentos>();

    protected async override Task OnInitializedAsync()
    {
        ListaDepartamento = await departamentoBLL.GetList(t => true);

        if (IdDepartamento > 0)
        {
            this.departamento.IdDepartamento = IdDepartamento;
            await this.Buscar();
        }
    }
    private async Task Buscar()
    {
        if (departamento.IdDepartamento > 0)
        {
            var encontrado = await departamentoBLL.Buscar(departamento.IdDepartamento);

            if (encontrado != null)
                this.departamento = encontrado;
        }
        else
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = "No Existe este departamento"
            });
        }
    }

    public void Nuevo()
    {
        mensaje = "";
        departamento = new Departamentos();
    }

    public async Task Guardar()
    {

        bool guardo = await departamentoBLL.Guardar(departamento);

        if (guardo)
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Guardado correctamente"
            });

            Nuevo();
        }
    }

    public async Task Eliminar()
    {
        bool elimino;

        elimino = await departamentoBLL.Eliminacion(departamento);
        if (elimino)
        {
            Nuevo();
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Fue eliminado correctamente."
            });
        }
        else
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "No fue Eliminado, intentar nuevamente o esta intentado eliminar sin datos."
            });
        }
    }

    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
    }
}