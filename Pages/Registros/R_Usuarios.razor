@page "/Usuario"
@page "/Usuario/{IdUsuario:int}"
@using Model
@attribute [Authorize]

@inject UsuariosBLL usuariosBLL
@inject NotificationService notificationService

<EditForm Model="usuario" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card">
        <div class="card-header">
            <h3>Registro de usuarios</h3>
        </div>
        <div class="card-body">
            @*Nombre*@
            <div class="mb-3">
                <label>Nombre</label>
                <InputText @bind-Value="usuario.Nombre" class="form-control" placeholder="Ingrese su nombre" />
                <ValidationMessage For="@(() => usuario.Nombre)" />
            </div>

            @*Apellido*@
            <div class="mb-3">
                <label>Apellido</label>
                <InputText @bind-Value="usuario.Apellido" class="form-control" placeholder="Ingrese su apellido" />
                <ValidationMessage For="@(() => usuario.Apellido)" />
            </div>
            @*Telefono*@
            <div class="mb-3">
                <label>Telefono</label>
                <InputText @bind-Value="usuario.Telefono" class="form-control" placeholder="Ingrese su Telefono" />
                <ValidationMessage For="@(() => usuario.Telefono)" />
            </div>

            @*Departamento*@
            <div class="mb-3">
                <label>Departamento</label>
                <InputSelect class="form-select" @bind-Value="usuario.Departamento">
                    <option value="" disabled selected>Seleccione Departamento</option>
                    <option value="Computos">Computos</option>
                    <option value="Tesoreria">Tesoreria</option>
                    <option value="Presupuesto">Presupuesto</option>
                    <option value="Contraloria">Contraloria</option>
                    <option value="Auditoria">Auditoria</option>
                    <option value="Compras">Compras</option>
                </InputSelect>
                <InputText hidden @bind-Value="usuario.Departamento" class="form-control" />
                <ValidationMessage For="@(() => usuario.Departamento)" />
            </div>

            @*Cedula*@
            <div class="mb-3">
                <label>Cedula</label>
                <InputText @bind-Value="usuario.Cedula" class="form-control"
                    placeholder="Ingrese su Cedula Ejemplo 123-1234567-1" />
                <ValidationMessage For="@(() => usuario.Cedula)" />
            </div>


            @*Usuario*@
            <div class="mb-3">
                <label>Usuario</label>
                <InputText @bind-Value="usuario.Usuario1" class="form-control" placeholder="Ingrese su usuario" />
                <ValidationMessage For="@(() => usuario.Usuario1)" />
            </div>

            @*Clave*@
            <div class="mb-3">
                <label>Clave</label>
                <InputText type="password" @bind-Value="usuario.Clave" class="form-control"
                    placeholder="Ingrese su Clave" />
                <ValidationMessage For="@(() => usuario.Clave)" />
            </div>
            @*Privilegio*@
            <div class="mb-3">
                <label>Privilegio</label>
                <InputSelect class="form-select" @bind-Value="usuario.Privilegio">
                    <option value="" disabled selected>Seleccione privilegio</option>
                    <option value="Administrador">Administrador</option>
                    <option value="Usuario">Usuario</option>
                </InputSelect>
                <InputText hidden @bind-Value="usuario.Privilegio" class="form-control" />
                <ValidationMessage For="@(() => usuario.Privilegio)" />
            </div>
        </div>
    </div>

    <div class="card-footer">
        <div class="mb-3 text-center" display: inline-block>
            <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">
                <i class="oi oi-file" /> Nuevo
            </button>
            <button type="submit" class="btn btn-lg btn-success">
                <i class="oi oi-document" /> Guardar
            </button>
            @* en caso de quieran eliminar absolutamente(Hasta en la base de datos) aqui esta el boton *@
                @* <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">
                <i class="oi oi-trash" /> Eliminar
                </button> *@
        </div>
    </div>
</EditForm>

@code
{
    [Parameter]

    public int IdUsuario { get; set; }
    public Usuarios usuario { get; set; } = new Usuarios();
    public String mensaje { get; set; } = "";
    private List<Usuarios> ListaUsuarios { get; set; } = new List<Usuarios>();
    private static readonly Dictionary<string, bool> _cacheCedulas = new Dictionary<string, bool>();

    protected async override Task OnInitializedAsync()
    {
        await CargarListaUsuarios();

        if (IdUsuario > 0)
        {
            await CargarUsuario(IdUsuario);
        }
    }

    private async Task CargarListaUsuarios()
    {
        var lista = await usuariosBLL.GetList(t => true);
        ListaUsuarios = lista;
    }

    private async Task CargarUsuario(int idUsuario)
    {
        this.usuario.IdUsuario = idUsuario;
        await this.Buscar();
    }


    private async Task Buscar()
    {
        if (usuario.IdUsuario > 0)
        {
            var encontrado = await usuariosBLL.Buscar(usuario.IdUsuario);

            if (encontrado != null)
                this.usuario = encontrado;
        }
        else
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = "No Existe este usuario"
            });
        }
    }

    public void Nuevo()
    {
        mensaje = "";
        usuario = new Usuarios();
    }

    private bool _existeCedula;

    public async Task Guardar()
    {
        _existeCedula = await CedulaExiste();

        if (_existeCedula)
        {
            var notification = new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Esta Cedula ya existe intente otra."
            };
            ShowNotification(notification);
            return;
        }
        if (await usuariosBLL.Guardar(usuario))
        {
            var notification = new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Guardado correctamente"
            };
            ShowNotification(notification);
            Nuevo();
        }
    }





    public async Task Eliminar()
    {

        if (await usuariosBLL.Eliminacion(usuario))
        {
            Nuevo();
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Fue eliminado correctamente."
            });
        }
        else
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "No fue Eliminado, intentar nuevamente o esta intentado eliminar sin datos."
            });
        }
    }

    

    public async Task<bool> CedulaExiste()
    {
        if (_cacheCedulas.TryGetValue(usuario.Cedula, out bool existeCedula))
        {
            return existeCedula;
        }

        var listaUsuarios = await usuariosBLL.GetList(o => o.Cedula == usuario.Cedula);
        existeCedula = listaUsuarios.Any(u => u.IdUsuario != usuario.IdUsuario);

        _cacheCedulas[usuario.Cedula] = existeCedula;

        return existeCedula;
    }


    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
    }
}