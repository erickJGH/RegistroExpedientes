@page "/Usuario"
@page "/Usuario/{IdUsuario:int}"
@using Model

@inject UsuariosBLL usuariosBLL
@inject NotificationService notificationService

<EditForm Model="usuario" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

     <div class="card">
        <div class="card-header">
            <h3>Registro de usuarios</h3>
        </div>
        <div class="card-body">
            @*Nombre*@
            <div class="mb-3">
                <label>Nombre</label>
                <InputText @bind-Value="usuario.Nombre" class="form-control" placeholder="Ingrese su nombre"/>
                <ValidationMessage For="@(() => usuario.Nombre)" />
            </div>

            @*Apellido*@
            <div class="mb-3">
                <label>Apellido</label>
                <InputText @bind-Value="usuario.Apellido" class="form-control" placeholder="Ingrese su apellido" />
                <ValidationMessage For="@(() => usuario.Apellido)" />
            </div>

             @*Departamento*@
            <div class="mb-3">
                <label>Departamento</label>
                <InputSelect class="form-select" @bind-Value="usuario.Departamento">
                    <option value="" disabled selected>Seleccione Departamento</option>
                    <option value="Computos">Computos</option> 
                    <option value="Tesoreria">Tesoreria</option> 
                    <option value="Presupuesto">Presupuesto</option> 
                    <option value="Contraloria">Contraloria</option> 
                    <option value="Auditoria">Auditoria</option> 
                    <option value="Compras">Compras</option> 
                </InputSelect>
                <InputText  hidden @bind-Value="usuario.Departamento" class="form-control" />
                <ValidationMessage For="@(() => usuario.Departamento)" />
            </div>

            @*Cedula*@
            <div class="mb-3">
                <label>Cedula</label>
                <InputText @bind-Value="usuario.Cedula" class="form-control" placeholder="Ingrese su Cedula"/>
                <ValidationMessage For="@(() => usuario.Cedula)" />
            </div>


            @*Usuario*@
            <div class="mb-3">
                <label>Usuario</label>
                <InputText @bind-Value="usuario.Usuario1" class="form-control" placeholder="Ingrese su usuario"/>
                <ValidationMessage For="@(() => usuario.Usuario1)" />
            </div>

            @*Clave*@
            <div class="mb-3">
                <label>Clave</label>
                <InputText type="password" @bind-Value="usuario.Clave" class="form-control" placeholder="Ingrese su Clave" />
                <ValidationMessage For="@(() => usuario.Clave)" />
            </div>
            @*Privilegio*@
            <div class="mb-3">
                <label>Privilegio</label>
                <InputSelect class="form-select" @bind-Value="usuario.Privilegio">
                    <option value="" disabled selected>Seleccione privilegio</option>
                    <option value= "Administrador">Administrador</option> 
                    <option value= "Usuario">Usuario</option> 
                </InputSelect>
                <InputText hidden @bind-Value="usuario.Privilegio" class="form-control" />
                <ValidationMessage For="@(() => usuario.Privilegio)" />
            </div>
        </div>
    </div>      

        <div class="card-footer">
            <div class="mb-3 text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">
                    <i class="oi oi-file" /> Nuevo
                </button>
                <button type="submit" class="btn btn-lg btn-success">
                    <i class="oi oi-document" /> Guardar
                </button>
                 @* en caso de quieran eliminare absolutamente aqui esta el boton
                    <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">
                        <i class="oi oi-trash" /> Eliminar
                    </button> *@
            </div>
        </div>
</EditForm>

@code
{
    [Parameter]
    public int IdUsuario { get; set; }
    public Usuarios usuario { get; set; } = new Usuarios();
    public String mensaje { get; set; } = "";
    private List<Usuarios> ListaUsuarios { get; set; } = new List<Usuarios>();

    protected async override Task OnInitializedAsync()
    {
        ListaUsuarios = await usuariosBLL.GetList(t => true);

        if (IdUsuario > 0)
        {
            this.usuario.IdUsuario = IdUsuario;
            await this.Buscar();
        }
    }
    private async Task Buscar()
    {
        if (usuario.IdUsuario > 0)
        {
            var encontrado = await usuariosBLL.Buscar(usuario.IdUsuario);

            if (encontrado != null)
                this.usuario = encontrado;
        }
        else
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Warning,
                Summary = "No Existe este usuario"
            });
        }
    }

    public void Nuevo()
    {
        mensaje = "";
        usuario = new Usuarios();
    }

    public async Task Guardar()
    {

        bool guardo = await usuariosBLL.Guardar(usuario);

        if (guardo)
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Guardado correctamente"
            });

            Nuevo();
        }
    }

    public async Task Eliminar()
    {
        bool elimino;

        elimino = await usuariosBLL.Eliminacion(usuario);
        if (elimino)
        {
            Nuevo();
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Fue eliminado correctamente."
            });
        }
        else
        {
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "No fue Eliminado, intentar nuevamente o esta intentado eliminar sin datos."
            });
        }
    }

    public async Task<bool> Cedula()
    {
        bool paso = false;
        var Listado = new List<Usuarios>();

        Listado = await usuariosBLL.GetList(p => p.Cedula == usuario.Cedula);

        if (Listado.Count == 1)
        {
            if (usuario.IdUsuario == 0)
                return paso = true;

            Usuarios UsuarioTemporal = new Usuarios();
            UsuarioTemporal = Listado[0];
            if (UsuarioTemporal.IdUsuario != usuario.IdUsuario)
            {
                paso = true;
            }
        }
        else if (Listado.Count > 1)
        {
            paso = true;
        }

        return paso;
    }

    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
    }
}